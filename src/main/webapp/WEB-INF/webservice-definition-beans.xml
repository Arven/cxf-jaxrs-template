<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xmlns:jaxws="http://cxf.apache.org/jaxws"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:cxf="http://cxf.apache.org/core"
  xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.1.xsd
http://cxf.apache.org/jaxrs
http://cxf.apache.org/schemas/jaxrs.xsd
http://cxf.apache.org/jaxws
http://cxf.apache.org/schemas/jaxws.xsd
http://cxf.apache.org/core
http://cxf.apache.org/schemas/core.xsd
">

    <!-- Scan components using the JSR330 Dependency Injection Annotations -->
    <context:component-scan base-package="com.github.arven.rs.services.example" scope-resolver="org.springframework.context.annotation.Jsr330ScopeMetadataResolver" />
    
    <!-- Define Services -->
    <bean id="microBlogUserService" class="com.github.arven.rs.services.example.MicroBlogUserService" />
    <bean id="microBlogRestService" class="com.github.arven.rs.services.example.MicroBlogRestService" />      

    <!-- Set JSR250 Method Annotations -->    
    <security:global-method-security jsr250-annotations="enabled" />
    
    <!-- Create a demo authentication manager with predefined credentials -->
    <security:authentication-manager>
      <security:authentication-provider user-service-ref="microBlogUserService" />
    </security:authentication-manager>
    
    <!-- Create digest filter which processes the user data -->
    <bean id="digestFilter" class=
        "org.springframework.security.web.authentication.www.DigestAuthenticationFilter">
        <property name="userDetailsService" ref="microBlogUserService"/>
        <property name="authenticationEntryPoint" ref="digestEntryPoint"/>
    </bean>

    <!-- Create digest entry point -->
    <bean id="digestEntryPoint" class=
        "org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint">
        <property name="realmName" value="spring-cxf-example"/>
        <property name="key" value="acegi"/>
    </bean>
      
    <!-- Create stateless security config with Basic and Digest authentication -->
    <security:http use-expressions="true" create-session="stateless" entry-point-ref="digestEntryPoint">
        <security:anonymous />
        <security:http-basic />
        <security:custom-filter ref="digestFilter" after="BASIC_AUTH_FILTER" />
    </security:http>
    
    <!-- Create the Jackson JAXB Json Mapper -->
	<bean id="jsonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
	    <property name="serializationInclusion" value="NON_NULL" />
	    <property name="annotationIntrospector">
	    	<bean class="com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector" />
	    </property>
	</bean>    
    
    <!-- Create a REST endpoint with the defined services at /rest -->
    <jaxrs:server id="microBlogRest" address="/v1">
        <jaxrs:serviceBeans>
            <ref bean="microBlogRestService" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <!-- Configure the Web Application Exception (404, etc) Mapper -->
            <bean class="org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper">
                <property name="printStackTrace" value="false" />
                <property name="addMessageToResponse" value="true" />
            </bean>
            
            <!-- Configure the JAXB XML Provider -->
            <bean class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
                <property name="singleJaxbContext" value="true" />
                <property name="marshallerProperties">
                    <map>
                        <entry key="jaxb.formatted.output" value="true" value-type="java.lang.Boolean" />
                    </map>
                </property>
            </bean>
            
            <!-- Create the Jackson JSON Provider -->
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider">
                <property name="mapper">
                	<ref bean="jsonObjectMapper" />
                </property>
            </bean>
        </jaxrs:providers>
    </jaxrs:server>
    
</beans>